<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>BirkeyCo</title>
<description>BirkeyCo</description>
<link>https://www.birkey.co/</link>
<lastBuildDate>Sat, 27 Oct 2018 11:59:15 -0700</lastBuildDate>
<item>
  <title>Datafy and tap> in Clojure 1.10</title>
  <description><![CDATA[
<p>
I noticed couple of new features being added to Clojure 1.10. One is
<b>tap</b>, which is added to the core ns, and the other is <b>datafy</b>, which
is added to clojure.datafy ns.  
</p>

<p>
<b>tap</b> essentially is an atom holding set of fns of single arity, which
will be asynchronously called on any value you you send via
<b>tap&gt;</b>. You can add a single arity fn to the <b>tap</b> via <b>(add-tap f)</b>
and remove the fn via <b>(remove-tap f</b>).  Note that you have to
remember the fn you added so you can remove it. Otherwise, you have no
way of removing the fn, which is an inconvenience but there might be a
reason why it is the way it is. I am not sure about its intended use
cases but I know it comes handy when you have a set of transformation
(<b>important: order of those transformation should not matter</b>) that you
would like to apply to any value asynchronously. I can think of
following uses cases for tap:
</p>
<ul class="org-ul">
<li>Collecting some sort of diagnostic information about running system.</li>
<li>Streaming serious of values to be processed and routed to a sink somewhere.</li>
<li>May be used (rather abused) to execute some code? hope not.</li>
</ul>
<p>
Enough being said, let us see with a simple example to cover first
uses case I said above. 
</p>
<div class="org-src-container">
<pre class="src src-clojure"><span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">def</span> <span style="color: #a0522d;">context</span> <span style="color: #7f7f7f;">(</span>StringBuilder.<span style="color: #7f7f7f;">))</span>

<span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">defn</span> <span style="color: #0000ff;">-&gt;context</span> <span style="color: #7f7f7f;">[</span>x<span style="color: #7f7f7f;">]</span>
  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">doto</span> context
    <span style="color: #7f7f7f;">(</span>.append x<span style="color: #7f7f7f;">)))</span>

<span style="color: #b22222;">;; </span><span style="color: #b22222;">Then let us add above fn to the tapset</span>
<span style="color: #7f7f7f;">(</span>add-tap -&gt;context<span style="color: #7f7f7f;">)</span>
<span style="color: #b22222;">;; </span><span style="color: #b22222;">Then from any where of our running code, we can do:</span>
<span style="color: #7f7f7f;">(</span>tap&gt; <span style="color: #8b2252;">"******* tap start ********</span><span style="color: #8b2252; font-weight: bold;">\n</span><span style="color: #8b2252;"> "</span><span style="color: #7f7f7f;">)</span>
<span style="color: #7f7f7f;">(</span>tap&gt; <span style="color: #8b2252;">"runing.......................</span><span style="color: #8b2252; font-weight: bold;">\n</span><span style="color: #8b2252;">"</span><span style="color: #7f7f7f;">)</span>
<span style="color: #7f7f7f;">(</span>tap&gt; <span style="color: #8b2252;">"******* tap end **********</span><span style="color: #8b2252; font-weight: bold;">\n</span><span style="color: #8b2252;"> "</span><span style="color: #7f7f7f;">)</span>

<span style="color: #b22222;">;; </span><span style="color: #b22222;">It will be executed in a separate dedicated thread and will not</span>
<span style="color: #b22222;">;; </span><span style="color: #b22222;">block or interfere with our running code. Then we print out the context:</span>
<span style="color: #7f7f7f;">(</span>str context<span style="color: #7f7f7f;">)</span>
<span style="color: #b22222;">;; </span><span style="color: #b22222;">which results in:</span>
<span style="color: #b22222;">;;</span><span style="color: #b22222;">******* tap start ********</span>
<span style="color: #b22222;">;; </span><span style="color: #b22222;">runing.......................</span>
<span style="color: #b22222;">;;</span><span style="color: #b22222;">******* tap end **********</span>

<span style="color: #b22222;">;; </span><span style="color: #b22222;">Remember to remove the -&gt;context fn once you are done with that session:</span>
<span style="color: #7f7f7f;">(</span>remove-tap -&gt;context<span style="color: #7f7f7f;">)</span>
<span style="color: #b22222;">;; </span><span style="color: #b22222;">If there is no fn added to the tap, any values you send to tap will be discarded.</span>
<span style="color: #7f7f7f;">(</span>tap&gt; <span style="color: #8b2252;">"your magic"</span><span style="color: #7f7f7f;">)</span> <span style="color: #b22222;">;; </span><span style="color: #b22222;">your magic will be discarded.</span>

</pre>
</div>

<p>
The other one I noticed is <b>datafy</b>, which I am more excited about. I
am already using it to find out about java classes members, methods
and its object graph. Let us take a java class <b>String</b> as an example.
</p>
<div class="org-src-container">
<pre class="src src-clojure"><span style="color: #7f7f7f;">(</span>require '<span style="color: #7f7f7f;">[</span>clojure.datafy <span style="color: #008b8b;">:as</span> d<span style="color: #7f7f7f;">])</span>
<span style="color: #7f7f7f;">(</span><span style="color: #228b22;">d</span>/datafy String<span style="color: #7f7f7f;">)</span> <span style="color: #b22222;">;; </span><span style="color: #b22222;">which will print all about its members in a nice clojure ds</span>

<span style="color: #b22222;">;; </span><span style="color: #b22222;">let us write an fn to give use any member that we would like to find more about:</span>
<span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">defn</span> <span style="color: #0000ff;">member-lookup</span> <span style="color: #7f7f7f;">[</span>class member<span style="color: #7f7f7f;">]</span>
  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">-&gt;&gt;</span> class
       <span style="color: #228b22;">d</span>/datafy
       <span style="color: #008b8b;">:members</span>
       <span style="color: #7f7f7f;">(</span>filter <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">fn</span> <span style="color: #7f7f7f;">[[</span>k v<span style="color: #7f7f7f;">]]</span> <span style="color: #7f7f7f;">(</span>= <span style="color: #7f7f7f;">(</span>symbol member<span style="color: #7f7f7f;">)</span> k<span style="color: #7f7f7f;">)))))</span>
<span style="color: #b22222;">;; </span><span style="color: #b22222;">then use it to find about "intern"</span>
<span style="color: #7f7f7f;">(</span>member-lookup String <span style="color: #8b2252;">"intern"</span><span style="color: #7f7f7f;">)</span>
<span style="color: #b22222;">;; </span><span style="color: #b22222;">returns:</span>
<span style="color: #7f7f7f;">([</span>intern
  <span style="color: #7f7f7f;">[</span>{<span style="color: #008b8b;">:name</span> intern,
    <span style="color: #008b8b;">:return-type</span> java.lang.String,
    <span style="color: #008b8b;">:declaring-class</span> java.lang.String,
    <span style="color: #008b8b;">:parameter-types</span> <span style="color: #7f7f7f;">[]</span>,
    <span style="color: #008b8b;">:exception-types</span> <span style="color: #7f7f7f;">[]</span>,
    <span style="color: #008b8b;">:flags</span> #{<span style="color: #008b8b;">:public</span> <span style="color: #008b8b;">:native</span>}}<span style="color: #7f7f7f;">]])</span>

<span style="color: #b22222;">;; </span><span style="color: #b22222;">One can learn a lot about this method from above ds. "intern" is a</span>
<span style="color: #b22222;">;; </span><span style="color: #b22222;">public native method that takes no argument, called on string object</span>
<span style="color: #b22222;">;; </span><span style="color: #b22222;">and returns string like this:</span>
<span style="color: #7f7f7f;">(</span>.intern <span style="color: #8b2252;">"test"</span><span style="color: #7f7f7f;">)</span> <span style="color: #b22222;">;; </span><span style="color: #b22222;">=&gt; "test"</span>

</pre>
</div>

<p>
This means we can use above information to create Clojure fns on the
fly for java inter-op. One great use case would be to generate Clojure
fns out of AWS Java SDK, which I might do if time permits.
</p>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-clojure.html">Clojure</a> </div>]]></description>
  <category>Clojure</category>
  <link>https://www.birkey.co/2018-10-26-datafy-and-tap>-in-clojure-1.10.html</link>
  <pubDate>Fri, 26 Oct 2018 11:19:00 -0700</pubDate>
</item>
<item>
  <title>Debug VoidLinux unresolvable lib issue</title>
  <description><![CDATA[
<p>
I have been a happy user of <b><a href="https://voidlinux.org/">VoidLinux</a></b> for about a year now and so
far have had almost no glitches whatsoever except for updating a year
old version of it installed on one of my spare laptop. The issue started as following:
</p>
<div class="org-src-container">
<pre class="src src-shell">xbps-install -Su
<span style="color: #b22222;"># </span><span style="color: #b22222;">resulted in following:</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">mozjs: broken, unresolvable shlib `libicu.so'</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Transaction aborted due to unresolved shlibs.</span>
</pre>
</div>
<p>
I do not now about you but I usually start with a google search of
what I think is somewhat general terms in my error message, which is
<i><b>&ldquo;Transaction aborted due to unresolved shlibs&rdquo;</b></i> in my case. Searching
with the above term came up with number of results and all point to
the build system is still running. You can check the status of it
here: <a href="https://build.voidlinux.eu/waterfall">Void Build Status</a>, which I did find that all is green and
idle. So it did not help me resolve my issue. Then, I decided to do
one more search with <i><b>&ldquo;mozjs: broken, unresolvable shlib
`libicu.so&rsquo;&rdquo;</b></i>, which is more specific to the state of my box only but
that did not help me go anywhere. Then I decided to debug it
myself. Following is my commandline session how I resolved it:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="color: #b22222;"># </span><span style="color: #b22222;">Ran the command again to make sure I have above issue </span>
xbps-install -Su
<span style="color: #b22222;"># </span><span style="color: #b22222;">again resulted in following:</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">mozjs: broken, unresolvable shlib `libicu.so'</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Transaction aborted due to unresolved shlibs.</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Notice the /*mozjs*/, which is my clue. Then I did:</span>
xbps-query -Rs mozjs
<span style="color: #b22222;"># </span><span style="color: #b22222;">from the output, I confirmed that it was not installed on my box,</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">which is my second clue to check if my repos url are</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">up-to-date. Remember it is a year old version of VoidLinux.  I</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">noticed from the output of xpbs-install -u, that the</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">void-repo-nonfree url does indeed point to an old url. So, I did:</span>
xbps-remove void-repo-nonfree &amp;&amp; xbps-install void-repo-nonfree
<span style="color: #b22222;"># </span><span style="color: #b22222;">to make sure my repo url is up-to-date. Then it is time to clean my</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">repo cache and remove any packages that might be orphened since my</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">repo url is pointing to a different url now. Using manpages for</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">xpbs-remove, I can do above with:</span>
xbps-remove -Oo
<span style="color: #b22222;"># </span><span style="color: #b22222;">Then I ran:</span>
xbps-install -Su
<span style="color: #b22222;"># </span><span style="color: #b22222;">Voila!, My one year old box is up-to-date without any issues now.</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">After all of this, I just made an one liner alias in my shell config:</span>
<span style="color: #483d8b;">alias</span> <span style="color: #a0522d;">c</span>=<span style="color: #8b2252;">'xbps-remove void-repo-nonfree &amp;&amp; xbps-install void-repo-nonfree &amp;&amp; xbps-install -Su </span>
</pre>
</div>

<p>
So no love lost for VoidLinux and it is still as awesome as ever. Just
to recap steps that I took to solve the issue:
</p>
<ol class="org-ol">
<li>Start using more general term to do a google search then narrow it
to specific ones. If it works, you save time and unneeded effort.</li>
<li>Check for the problem package reported. Is it installed? If yes,
try removing or updating it to see if it resolves your issue.</li>
<li>If you do not see the package installed, it might be repo url +
orphaned package issue. So update the repo url, remove orphan
packages and rebuild the cache.</li>
</ol>

<p>
If you tried all of the above and your issue still did not get
resolved, you might want to post it in VoidLinux forum for help. 
</p>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-voidlinux.html">VoidLinux</a> </div>]]></description>
  <category>VoidLinux</category>
  <link>https://www.birkey.co/2018-10-20-debug-voidlinux-unresolvable-lib-issue.html</link>
  <pubDate>Sat, 20 Oct 2018 13:53:00 -0700</pubDate>
</item>
<item>
  <title>Visualize Google search results from Clojure REPL</title>
  <description><![CDATA[
<p>
While back when I was learning Clojure, I have written a small lib
that allows me directly generate bar chart out of google search
results from Clojure. I updated it with latest deps and added a fn to
save the bar-chart to a png file. You can checkout the project here:
<a href="https://github.com/oneness/gcount">https://github.com/oneness/gcount</a>.  Here is a one liner to get you
going:
</p>
<div class="org-src-container">
<pre class="src src-shell">git clone git@github.com:oneness/gcount.git &amp;&amp; <span style="color: #483d8b;">cd</span> gcount &amp;&amp; lein repl
</pre>
</div>
<p>
Once you are in repl, you can type following:
</p>
<div class="org-src-container">
<pre class="src src-clojure"><span style="color: #7f7f7f;">(</span>search-view-terms <span style="color: #7f7f7f;">[</span><span style="color: #8b2252;">"Clojure Programming"</span> <span style="color: #8b2252;">"Elixir Programming"</span> <span style="color: #8b2252;">"Elm Programming"</span><span style="color: #7f7f7f;">])</span>
</pre>
</div>
<p>
Above will produce something like this:
<img src="https://www.birkey.co/images/google-search-result.png" alt="google-search-result.png">
</p>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-clojure.html">clojure</a> </div>]]></description>
  <category>clojure</category>
  <link>https://www.birkey.co/2018-10-04-visualize-google-search-results-from-clojure-repl.html</link>
  <pubDate>Thu, 04 Oct 2018 11:21:00 -0700</pubDate>
</item>
<item>
  <title>VM flags from running JVM</title>
  <description><![CDATA[
<p>
While I was doing some JVM GC analysis recently, I got curious about the vm flags that `java` command uses by default if you do not specify it when starting your JVM.
Reading up JDK docs, I found <b>jcmd</b> is exactly what you need:
</p>
<div class="org-src-container">
<pre class="src src-shell">jcmd
</pre>
</div>
<p>
That will list all jvm instances running on your system beginning with
its pids, which you can pass into <b>jcmd</b> with options to print VM flags like this:
</p>
<div class="org-src-container">
<pre class="src src-shell">jcmd &lt;pid&gt; VM.flags
</pre>
</div>
<p>
There are many options you can use other than `VM.flags`, which you can get a full list by:
</p>
<div class="org-src-container">
<pre class="src src-shell">jcmd &lt;pid&gt; help
</pre>
</div>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-jvm.html">jvm</a> </div>]]></description>
  <category>jvm</category>
  <link>https://www.birkey.co/2018-10-03-vm-flags-from-running-jvm.html</link>
  <pubDate>Wed, 03 Oct 2018 12:03:00 -0700</pubDate>
</item>
<item>
  <title>Blogging Made Simple</title>
  <description><![CDATA[
<p>
After taking some time off from work to focus on projects that I like
to take on, I set out to find a simple way to use git and emacs workflow to
start blogging again. Among plethora of options on the web, I came
across this project - <a href="https://github.com/bastibe/org-static-blog">Org Static Blog</a> - that I resonated with. It took
me no time to set it up and start blogging. Below is my setup:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">use-package</span> <span style="color: #008b8b;">org-static-blog</span>
  <span style="color: #483d8b;">:straight</span> t
  <span style="color: #483d8b;">:config</span>
  <span style="color: #b22222;">;; </span><span style="color: #b22222;">-----------------------------------------------------------------------------</span>
  <span style="color: #b22222;">;; </span><span style="color: #b22222;">Set up blogging in Emacs</span>
  <span style="color: #b22222;">;; </span><span style="color: #b22222;">-----------------------------------------------------------------------------</span>

  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-static-blog-publish-title <span style="color: #8b2252;">"BirkeyCo"</span><span style="color: #7f7f7f;">)</span>
  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-static-blog-publish-url <span style="color: #8b2252;">"https://www.birkey.co/"</span><span style="color: #7f7f7f;">)</span>
  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-static-blog-publish-directory <span style="color: #8b2252;">"~/github/oneness.github.io/"</span><span style="color: #7f7f7f;">)</span>
  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-static-blog-posts-directory <span style="color: #8b2252;">"~/github/oneness.github.io/posts/"</span><span style="color: #7f7f7f;">)</span>
  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-static-blog-drafts-directory <span style="color: #8b2252;">"~/github/oneness.github.io/drafts/"</span><span style="color: #7f7f7f;">)</span>
  <span style="color: #b22222;">;;</span><span style="color: #b22222;">(setq org-static-blog-enable-tags t)</span>
  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-export-with-toc nil<span style="color: #7f7f7f;">)</span>
  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-export-with-section-numbers nil<span style="color: #7f7f7f;">)</span>

  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-static-blog-page-header
        <span style="color: #8b2252;">"&lt;meta name=\"author\" content=\"Kasim Tuman\"&gt;</span>
<span style="color: #8b2252;">&lt;meta name=\"referrer\" content=\"no-referrer\"&gt;</span>
<span style="color: #8b2252;">&lt;link href= \"static/style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;</span>
<span style="color: #8b2252;">&lt;link rel=\"icon\" href=\"static/favicon.ico\"&gt;</span>
<span style="color: #8b2252;">&lt;link rel=\"apple-touch-icon-precomposed\" href=\"static/birkey_logo.png\"&gt;</span>
<span style="color: #8b2252;">&lt;link rel=\"msapplication-TitleImage\" href=\"static/birkey_logo.png\"&gt;</span>
<span style="color: #8b2252;">&lt;link rel=\"msapplication-TitleColor\" href=\"#0141ff\"&gt;</span>
<span style="color: #8b2252;">&lt;script src=\"static/katex.min.js\"&gt;&lt;/script&gt;</span>
<span style="color: #8b2252;">&lt;script src=\"static/auto-render.min.js\"&gt;&lt;/script&gt;</span>
<span style="color: #8b2252;">&lt;link rel=\"stylesheet\" href=\"static/katex.min.css\"&gt;</span>
<span style="color: #8b2252;">&lt;script&gt;document.addEventListener(\"DOMContentLoaded\", function() { renderMathInElement(document.body); });&lt;/script&gt;</span>
<span style="color: #8b2252;">&lt;meta http-equiv=\"content-type\" content=\"application/xhtml+xml; charset=UTF-8\"&gt;</span>
<span style="color: #8b2252;">&lt;meta name=\"viewport\" content=\"initial-scale=1,width=device-width,minimum-scale=1\"&gt;"</span><span style="color: #7f7f7f;">)</span>

  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-static-blog-page-preamble
        <span style="color: #8b2252;">"&lt;div class=\"header\"&gt;</span>
<span style="color: #8b2252;">  &lt;a href=\"https://birkey.co\"&gt;Code, Data and Network&lt;/a&gt;</span>
<span style="color: #8b2252;">  &lt;div class=\"sitelinks\"&gt;</span>
<span style="color: #8b2252;">    &lt;a href=\"https://twitter.com/KasimTuman\"&gt;Twitter&lt;/a&gt; | &lt;a href=\"https://github.com/oneness\"&gt;Github&lt;/a&gt;</span>
<span style="color: #8b2252;">  &lt;/div&gt;</span>
<span style="color: #8b2252;">&lt;/div&gt;"</span><span style="color: #7f7f7f;">)</span>

  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-static-blog-page-postamble
        <span style="color: #8b2252;">"&lt;div id=\"archive\"&gt;</span>
<span style="color: #8b2252;">  &lt;a href=\"https://www.birkey.co/archive.html\"&gt;Other posts&lt;/a&gt;</span>
<span style="color: #8b2252;">&lt;/div&gt;</span>
<span style="color: #8b2252;">&lt;center&gt;&lt;a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\"&gt;&lt;img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/3.0/88x31.png\" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;span xmlns:dct=\"https://purl.org/dc/terms/\" href=\"https://purl.org/dc/dcmitype/Text\" property=\"dct:title\" rel=\"dct:type\"&gt;birkey.co&lt;/span&gt; by &lt;a xmlns:cc=\"https://creativecommons.org/ns#\" href=\"https://www.birkey.co\" property=\"cc:attributionName\" rel=\"cc:attributionURL\"&gt;Kasim Tuman&lt;/a&gt; is licensed under a &lt;a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\"&gt;Creative Commons Attribution-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/center&gt;"</span><span style="color: #7f7f7f;">)</span>

  <span style="color: #b22222;">;; </span><span style="color: #b22222;">This slows down org-publish to a crawl, and it is not needed since</span>
  <span style="color: #b22222;">;; </span><span style="color: #b22222;">I use magit anyway.</span>
  <span style="color: #7f7f7f;">(</span>remove-hook 'find-file-hooks 'vc-find-file-hook<span style="color: #7f7f7f;">))</span>
</pre>
</div>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-emacs.html">emacs</a> <a href="tag-blogging.html">blogging</a> </div>]]></description>
  <category>emacs</category>
  <category>blogging</category>
  <link>https://www.birkey.co/2018-9-20-blogging-simpler.html</link>
  <pubDate>Wed, 19 Sep 2018 17:00:00 -0700</pubDate>
</item>
</channel>
</rss>
