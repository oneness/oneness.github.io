<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>BirkeyCo</title>
<description>BirkeyCo</description>
<link>https://www.birkey.co/</link>
<lastBuildDate>Sat, 07 Sep 2019 15:56:34 -0700</lastBuildDate>
<item>
  <title>Atreus62 - Best portable mechanical keyboard</title>
  <description><![CDATA[
<p>
As a professional programmer, we spend a lot of time with our
keyboards. Having a good ergonomic keyboard is extremely important to
avoid RSI. Since I started learning more about mechanical and
ergonomic keyboards couple of years ago, I have experimented with many
of them - different models, layouts, and switches. Finally, I settled
down with following two: 
</p>
<ul class="org-ul">
<li><a href="https://kinesis-ergo.com/shop/advantage2/">Kinesis Advantage2</a></li>
<li><a href="https://shop.profetkeyboards.com/product/atreus62-keyboard">Profet Atreus62</a></li>
</ul>

<p>
Kinesis one needs couple of weeks to get used as apposed to the Profet
Atreus62 one, which took me few hours. They both uses brown switches,
Kinesis uses Cherry brown, Atreus62 uses Gateron brown. While there
are differences in terms of the point of actuation, peak and tactile
noise based on their spec, I personally did not feel strongly enough
to tell the difference so your mileage may vary. Both of them are very
easy to configure to your liking. Kinesis have done a great job when
it comes to how key mapping is done. Here is how you do it:
</p>
<ul class="org-ul">
<li>Just press both `progm` + F12 together to have it enter remap mode</li>
<li>Then, press the source key you want to move, release it, then press the
  destination key that you want to have the source key moved.</li>
<li>Press `progm` to return to normal mode (exits from remap mode).</li>
</ul>

<p>
Atreus62 is a bit involved but it is a joy to hack on it. It uses open
source firmware called `QMK` and you can read more about it here:
<a href="https://docs.qmk.fm/#/">https://docs.qmk.fm/#/</a>. The documentation is great and strongly
recommend you check them out. It is a bit overwhelming and you could
get lost among so much details. The easiest way to start configuring
are to follow these steps:
</p>
<ul class="org-ul">
<li>Go to <a href="https://config.qmk.fm/#/atreus62/LAYOUT">https://config.qmk.fm/#/atreus62/LAYOUT</a> and shuffle keys
  around to your liking.</li>
<li>Then download `KEYMAP ONLY`, which gives you `keymap.c`,
  `layers.json` and `readme.md`.</li>
<li>Unzip them to a folder say `MyAtreus62Layout`.</li>
<li>Clone QMK Firmware: <a href="https://github.com/qmk/qmk_firmware/">https://github.com/qmk/qmk_firmware/</a></li>
<li>Once cloned, run `./util/qmk-install.sh` from within cloned folder.</li>
<li>Copy `MyAtreus62Layout` folder into `/keyboards/atreus62/keymaps/`
  folder within the cloned folder.</li>
<li>Run `make atreus62:MyAtreus62Layout`.</li>
<li>It will generate `atreus62<sub>MyAtreus62Layout.hex</sub>` firmware file.</li>
<li>Use qmk-toolbox GUI found here:
  <a href="https://github.com/qmk/qmk_toolbox/releases/">https://github.com/qmk/qmk_toolbox/releases/</a> to flash the firmware.</li>
</ul>

<p>
<b>NOTE:</b> Remember to put your keyboard in flash mode by pressing a thin
paper clip through a tiny hole on the back of the keyboard. 
</p>

<p>
One you go through, above process, you will easily find that editing
the `keymap.c` file is the easiest way to arrange keys. All you need
is the key codes that you can find on the online GUI layout
editor. Once you edit keymap files using your favorite editor, save it
and run the above make command to generate the firmware to flash
it. You can also version control the keymap files in case you want to
share or change it later. Here is my layout if you are curious:
<a href="https://drive.google.com/open?id=1M6x73xg2kAfkL8AvSM31X8MpW3pPlXcX">https://drive.google.com/open?id=1M6x73xg2kAfkL8AvSM31X8MpW3pPlXcX</a>
</p>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-keyboard.html">keyboard</a> </div>]]></description>
  <category>keyboard</category>
  <link>https://www.birkey.co/2019-09-07-atreus62---best-portable-mechanical-keyboard.html</link>
  <pubDate>Sat, 07 Sep 2019 13:49:00 -0700</pubDate>
</item>
<item>
  <title>Why Emacs</title>
  <description><![CDATA[
<p>
I have been thinking about writing up my experience of using Emacs and
its positive influence on me as a Software Craftsman over the last 10
years or so. Over the weekend, I came across a a blog post by the CTO
of a company, who put it very well that have really resonated with
me. It is a great read, not too long not too short, that I strongly
recommend you go ahead read and come back here to continue with the
rest of what I had to say. Here is the link: <a href="https://www.fugue.co/blog/2018-08-09-two-years-with-emacs-as-a-cto.html">Two Years With Emacs as a
CEO (and now CTO)</a>. 
</p>

<p>
So I am not going to repeat what he said about Emacs and why he still
loves to use it to get things done. I am going to add following points
on top of what he wrote there:
</p>
<div id="outline-container-org2b112e2" class="outline-2">
<h2 id="org2b112e2">Emacs is a great workbench</h2>
<div class="outline-text-2" id="text-org2b112e2">
<p>
I see Emacs as an extremely well designed workbench that will evolve
with you as your work environment, technology and paradigms
change. Emacs is a live programming environment where you can change
every aspects of its functionalities, be it a simple text editing to a
complex work flow where you can interact with many external
systems. One of a startup that I worked had a mode where we have
interacted with our live system written in Clojure via its CLI
interface using `comint-mode`, which you should really checkout if you
are not familiar with it. You can use Emacs as the client with uniform
interface to many of the CLI, API and even for <a href="https://en.wikipedia.org/wiki/Application_binary_interface">ABI</a>. For example `EXWM`,
which is an Window Manager, is a great example.
</p>
</div>
</div>
<div id="outline-container-org5013317" class="outline-2">
<h2 id="org5013317">Emacs is a great structured and unstructured text manipulation library</h2>
<div class="outline-text-2" id="text-org5013317">
<p>
This is what I personally like a lot about Emacs. As a programmer, we
work with manipulating text all the time. Yes, there are great text
Editors out there, which by the way I have used all of them myself
before seeing the light of using Emacs. But I see all other
editors/IDEs as a framework for the things they set out to do rather
than a library that I can compose to solve a particular problem at
hand. For example, I can use `smartparens` package for structured text
editing of Clojure code.
</p>
</div>
</div>
<div id="outline-container-org444a521" class="outline-2">
<h2 id="org444a521">Emacs helps you focus</h2>
<div class="outline-text-2" id="text-org444a521">
<p>
In this day of our age where everything tries to grab your constant
attention, Emacs stands out as the most distraction free environment
to be in. One might argue that Emacs user spends way more time
configuration management, which is definitely true when you are just
getting started with any new toolbox, I found I spend very little time
with configuration or keeping it up to date. Once you are familiar with
Emacs help system and built in Documentation, You can be pretty much
on your own when it comes to how much you spend on customization. It
is this freedom you get from using Emacs where you are in charge as to
how much customization you would like. The reason I say Emacs helps
you focus is due to the fact that you have the freedom to make it an
distraction free writing/coding/communication environment to get done
what matters the most to you and have a lot of fun along the way.
</p>
</div>
</div>
<div id="outline-container-org3d7274c" class="outline-2">
<h2 id="org3d7274c">Emacs has a learning curve</h2>
<div class="outline-text-2" id="text-org3d7274c">
<p>
Yes, I do acknowledge that Emacs has a learning curve. However, most
of it is due to the wrong approach we tend to take when encountering an
unknown. On hindsight, I wish I had following approach, which I do now
all the time:
</p>
<ol class="org-ol">
<li>Start with getting familiar with Emacs terminology such as windows,
   buffers and frames etc. The builtin documentation is great for that
   and it is just C-h i (Hit Control and letter `h` at the same time,
   then hit `i`, which stands for info). To read Emacs&rsquo; manual just
   enter `m` and select `Emacs` from minibuffer. Hmm, you might be
   wondering what is minibuffer, let us use this approach to find
   out. Press following C-h i m key sequence and type `Minibuffer` and
   hit enter. Voila, you are reading all about `Minibuffer` from the
   official Emacs manual. No other application that I have used comes
   close to the level of Emacs in terms of self documentation.</li>
<li>Start with the goal of getting something done. I have two example
   that every programmer will benefit from learning: `Magit` and
   `Org-mode`. While you need to install `magit-mode`, which is a
   Emacs interface to git CLI, `org-mode` is built in. You will be
   surprised to find that it makes your git journey so much fun or
   your note organization so much enjoyable. I made the mistake of
   trying to memorize hot keys as much as I can before learning the
   hard truth of learning one key at a time as needed bases. I
   strongly recommend the only hot key you need at the beginning is
   `M-x`, where you just type a command so Emacs can execute for
   you. For Example, if you would like open (it is `visit` in Emacs
   speak) a file, just type `M-x` and type `file` then press tab key,
   select `find-file` in the completion buffer, now you can choose a
   file name from within the directory that you are in. It is just an
   example but knowing the fact that every action you perform in Emacs
   invokes an command, which is just an elisp function, is a very
   powerful realization. That means you can write an elisp function to
   have Emacs do whatever you like. You can also lookup what a command
   does using C-h f, then typing the name of the command. For example,
   C-h f then, type `org-insert-link` then enter and read on&#x2026;</li>
<li>I advise against starting with Emacs using other&rsquo;s configuration
   including Emacs that comes with pre-configuration. As I have
   mentioned earlier, Emacs is a great library where you can pick and
   choose to fit your work style. You will loose this great aspects if
   you start with other&rsquo;s way of configuring/composing it. If you had
   to just start with a minimal config, put this in your `init.el`
   file and start changing/adding/organizing configs as you see
   fit. For example:</li>
</ol>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><code><span style="color: #b22222;">;; </span><span style="color: #b22222;">Emacs reads init.el file located in ~/.emacs.d at startup</span></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">bootstrap el-get</span></code>
<code><span style="color: #7f7f7f;">(</span>add-to-list 'load-path <span style="color: #8b2252;">"~/.emacs.d/el-get/el-get"</span><span style="color: #7f7f7f;">)</span></code>
<code><span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">unless</span> <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">require</span> '<span style="color: #008b8b;">el-get</span> nil 'noerror<span style="color: #7f7f7f;">)</span></code>
<code>  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">with-current-buffer</span></code>
<code>      <span style="color: #7f7f7f;">(</span>url-retrieve-synchronously</code>
<code>       <span style="color: #8b2252;">"https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el"</span><span style="color: #7f7f7f;">)</span></code>
<code>    <span style="color: #7f7f7f;">(</span>goto-char <span style="color: #7f7f7f;">(</span>point-max<span style="color: #7f7f7f;">))</span></code>
<code>    <span style="color: #7f7f7f;">(</span>eval-print-last-sexp<span style="color: #7f7f7f;">)))</span></code>
<code></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">Initialize available packages first</span></code>
<code><span style="color: #7f7f7f;">(</span>package-refresh-contents t<span style="color: #7f7f7f;">)</span></code>
<code></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">The only package you need to get started</span></code>
<code><span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">el-get-bundle</span> smex</code>
<code>  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">progn</span></code>
<code>    <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">require</span> '<span style="color: #008b8b;">smex</span><span style="color: #7f7f7f;">)</span></code>
<code>    <span style="color: #7f7f7f;">(</span>global-set-key <span style="color: #7f7f7f;">(</span>kbd <span style="color: #8b2252;">"M-x"</span><span style="color: #7f7f7f;">)</span> 'smex<span style="color: #7f7f7f;">)))</span></code>
</pre>
</div>
<p>
Above snippets sets you up to use `El-get`, a great package manager
that I came to rely over the years and have never failed me. It also
pulls in the only package you had to have before getting started,
`smex` that makes the only command `M-x` you need much more
intuitive. Then say if you want to try `magit`, just type M-x
el-get-install, then `magit`. El-get will download it and install it
so you can starting using it in your git projects. Once you can find
your way around Emacs, you can start your journey of how best
organize your config/customization as you go along. I use just one
org file for it and you might or might not like it. Here is the file
in its entirety if you are interested: <a href="./static/config.html">My config snapshot</a>
</p>
</div>
</div>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-emacs.html">emacs</a> </div>]]></description>
  <category>emacs</category>
  <link>https://www.birkey.co/2019-08-04-why-emacs.html</link>
  <pubDate>Sun, 04 Aug 2019 12:43:00 -0700</pubDate>
</item>
<item>
  <title>Thoughts on Elixir Community by a Clojure Developer</title>
  <description><![CDATA[
<p>
I have been building systems in Clojure/ClojureScript for the the last
7 years or so. I enjoy using it to solve day to day problems. It is
still my go-to language of choice and I love the fact that it guides me
to think about problem at hand with very data centric way. As a tiny
example of this, consider a feature where you need to toggle the sort
ordering:
</p>
<div class="org-src-container">
<pre class="src src-clojure"><code><span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">defn</span> <span style="color: #0000ff;">toggle-order</span> <span style="color: #7f7f7f;">[</span>order<span style="color: #7f7f7f;">]</span></code>
<code>  <span style="color: #7f7f7f;">(</span>order {<span style="color: #008b8b;">:asc</span> <span style="color: #008b8b;">:desc</span></code>
<code>          <span style="color: #008b8b;">:desc</span> <span style="color: #008b8b;">:asc</span>}<span style="color: #7f7f7f;">))</span></code>
</pre>
</div>
<p>
It is tiny but mighty. There is no if/else/case etc and it is easy to
read, which is extremely important as your program grows due to needed
complexity. Speaking of being <b>easy to read</b>, I could not help but to
quote following from SICP book:
</p>
<blockquote>
<p>
Our design of this introductory computer-science subject reﬂects two
major concerns. First, we want to establish the idea that a computer
language is not just a way of gettng a computer to perform operations
but rather that it is a novel formal medium for expressing ideas about
methodology. <b>Thus, programs must be written for people to read, and
only incidentally for machines to execute.</b> Second, we believe that
the essential material to be addressed by a subject at this level is
not the syntax of particular programming-language constructs, nor
clever algorithms for computing particular functions efficiently, nor
even the mathematical analysis of algorithms and the foundations of
computing, but rather the techniques used to control the intellectual
complexity of large software systems.
</p>
</blockquote>

<p>
For me, Using Clojure and Datomic professionally has been a game
changer not only in terms of being more problem solving focused but
more importantly a paradigm shift for taming domain complexity. It has
helped me deliver robust, high performance systems within time and
budget. However, having bitten by half baked distributed systems made
up of tiny services done as afterthoughts, I have always been on the
lookout for more robust distributed system development story. Then I
found <b>Elixir</b>, a functional language running on Erlang VM called
<b>BEAM</b>. After spending some time attending ElixirConf US and couple of
meetups in <b>ErlangElixirSF</b>, I am posting what I really liked about
Elixir community that Clojure Community might benefit:
</p>

<ul class="org-ul">
<li>Elixir community has a strong focus on few important projects in
  their ecosystem, namely <b>Elixir the language and its build tool-
  Mix</b>, <b>Pheonix Framework</b>, <b>Nerve</b>, <b>Ecto</b>, and <b>absinthe - The
  GraphQL toolkit for Elixir</b>.</li>
<li>Elixir community is pretty mature in terms of keeping the core
  language small and extensible, which is abundantly clear from the
  creator of Elixir, Jose Valim&rsquo;s 2018 ElixirConf US keynote.</li>
<li>Elixir community is super focused on Documentation and Developer
  happiness by having great tooling and convention that they all love
  and agreed upon such as <b>mix format</b></li>
</ul>

<p>
I hope someone from both community find above helpful.
</p>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-clojure.html">clojure</a> <a href="tag-elixir.html">elixir</a> </div>]]></description>
  <category>clojure</category>
  <category>elixir</category>
  <link>https://www.birkey.co/2019-02-02-clojure-and-elixir.html</link>
  <pubDate>Sat, 02 Feb 2019 10:29:00 -0800</pubDate>
</item>
<item>
  <title>Datafy and tap> in Clojure 1.10</title>
  <description><![CDATA[
<p>
I noticed couple of new features being added to Clojure 1.10. One is
<b>tap</b>, which is added to the core ns, and the other is <b>datafy</b>, which
is added to clojure.datafy ns.  
</p>

<p>
<b>tap</b> essentially is an atom holding set of fns of single arity, which
will be asynchronously called on any value you you send via
<b>tap&gt;</b>. You can add a single arity fn to the <b>tap</b> via <b>(add-tap f)</b>
and remove the fn via <b>(remove-tap f</b>).  Note that you have to
remember the fn you added so you can remove it. Otherwise, you have no
way of removing the fn, which is an inconvenience but there might be a
reason why it is the way it is. I am not sure about its intended use
cases but I know it comes handy when you have a set of transformation
(<b>important: order of those transformation should not matter</b>) that you
would like to apply to any value asynchronously. I can think of
following uses cases for tap:
</p>
<ul class="org-ul">
<li>Collecting some sort of diagnostic information about running system.</li>
<li>Streaming serious of values to be processed and routed to a sink somewhere.</li>
<li>May be used (rather abused) to execute some code? hope not.</li>
</ul>
<p>
Enough being said, let us see with a simple example to cover first
uses case I said above. 
</p>
<div class="org-src-container">
<pre class="src src-clojure"><code><span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">def</span> <span style="color: #a0522d;">context</span> <span style="color: #7f7f7f;">(</span>StringBuilder.<span style="color: #7f7f7f;">))</span></code>
<code></code>
<code><span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">defn</span> <span style="color: #0000ff;">-&gt;context</span> <span style="color: #7f7f7f;">[</span>x<span style="color: #7f7f7f;">]</span></code>
<code>  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">doto</span> context</code>
<code>    <span style="color: #7f7f7f;">(</span>.append x<span style="color: #7f7f7f;">)))</span></code>
<code></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">Then let us add above fn to the tapset</span></code>
<code><span style="color: #7f7f7f;">(</span>add-tap -&gt;context<span style="color: #7f7f7f;">)</span></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">Then from any where of our running code, we can do:</span></code>
<code><span style="color: #7f7f7f;">(</span>tap&gt; <span style="color: #8b2252;">"******* tap start ********</span><span style="color: #8b2252; font-weight: bold;">\n</span><span style="color: #8b2252;"> "</span><span style="color: #7f7f7f;">)</span></code>
<code><span style="color: #7f7f7f;">(</span>tap&gt; <span style="color: #8b2252;">"runing.......................</span><span style="color: #8b2252; font-weight: bold;">\n</span><span style="color: #8b2252;">"</span><span style="color: #7f7f7f;">)</span></code>
<code><span style="color: #7f7f7f;">(</span>tap&gt; <span style="color: #8b2252;">"******* tap end **********</span><span style="color: #8b2252; font-weight: bold;">\n</span><span style="color: #8b2252;"> "</span><span style="color: #7f7f7f;">)</span></code>
<code></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">It will be executed in a separate dedicated thread and will not</span></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">block or interfere with our running code. Then we print out the context:</span></code>
<code><span style="color: #7f7f7f;">(</span>str context<span style="color: #7f7f7f;">)</span></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">which results in:</span></code>
<code><span style="color: #b22222;">;;</span><span style="color: #b22222;">******* tap start ********</span></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">runing.......................</span></code>
<code><span style="color: #b22222;">;;</span><span style="color: #b22222;">******* tap end **********</span></code>
<code></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">Remember to remove the -&gt;context fn once you are done with that session:</span></code>
<code><span style="color: #7f7f7f;">(</span>remove-tap -&gt;context<span style="color: #7f7f7f;">)</span></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">If there is no fn added to the tap, any values you send to tap will be discarded.</span></code>
<code><span style="color: #7f7f7f;">(</span>tap&gt; <span style="color: #8b2252;">"your magic"</span><span style="color: #7f7f7f;">)</span> <span style="color: #b22222;">;; </span><span style="color: #b22222;">your magic will be discarded.</span></code>
<code></code>
</pre>
</div>

<p>
The other one I noticed is <b>datafy</b>, which I am more excited about. I
am already using it to find out about java classes members, methods
and its object graph. Let us take a java class <b>String</b> as an example.
</p>
<div class="org-src-container">
<pre class="src src-clojure"><code><span style="color: #7f7f7f;">(</span>require '<span style="color: #7f7f7f;">[</span>clojure.datafy <span style="color: #008b8b;">:as</span> d<span style="color: #7f7f7f;">])</span></code>
<code><span style="color: #7f7f7f;">(</span><span style="color: #228b22;">d</span>/datafy String<span style="color: #7f7f7f;">)</span> <span style="color: #b22222;">;; </span><span style="color: #b22222;">which will print all about its members in a nice clojure ds</span></code>
<code></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">let us write an fn to give use any member that we would like to find more about:</span></code>
<code><span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">defn</span> <span style="color: #0000ff;">member-lookup</span> <span style="color: #7f7f7f;">[</span>class member<span style="color: #7f7f7f;">]</span></code>
<code>  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">-&gt;&gt;</span> class</code>
<code>       <span style="color: #228b22;">d</span>/datafy</code>
<code>       <span style="color: #008b8b;">:members</span></code>
<code>       <span style="color: #7f7f7f;">(</span>filter <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">fn</span> <span style="color: #7f7f7f;">[[</span>k v<span style="color: #7f7f7f;">]]</span> <span style="color: #7f7f7f;">(</span>= <span style="color: #7f7f7f;">(</span>symbol member<span style="color: #7f7f7f;">)</span> k<span style="color: #7f7f7f;">)))))</span></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">then use it to find about "intern"</span></code>
<code><span style="color: #7f7f7f;">(</span>member-lookup String <span style="color: #8b2252;">"intern"</span><span style="color: #7f7f7f;">)</span></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">returns:</span></code>
<code><span style="color: #7f7f7f;">([</span>intern</code>
<code>  <span style="color: #7f7f7f;">[</span>{<span style="color: #008b8b;">:name</span> intern,</code>
<code>    <span style="color: #008b8b;">:return-type</span> java.lang.String,</code>
<code>    <span style="color: #008b8b;">:declaring-class</span> java.lang.String,</code>
<code>    <span style="color: #008b8b;">:parameter-types</span> <span style="color: #7f7f7f;">[]</span>,</code>
<code>    <span style="color: #008b8b;">:exception-types</span> <span style="color: #7f7f7f;">[]</span>,</code>
<code>    <span style="color: #008b8b;">:flags</span> #{<span style="color: #008b8b;">:public</span> <span style="color: #008b8b;">:native</span>}}<span style="color: #7f7f7f;">]])</span></code>
<code></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">One can learn a lot about this method from above ds. "intern" is a</span></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">public native method that takes no argument, called on string object</span></code>
<code><span style="color: #b22222;">;; </span><span style="color: #b22222;">and returns string like this:</span></code>
<code><span style="color: #7f7f7f;">(</span>.intern <span style="color: #8b2252;">"test"</span><span style="color: #7f7f7f;">)</span> <span style="color: #b22222;">;; </span><span style="color: #b22222;">=&gt; "test"</span></code>
<code></code>
</pre>
</div>

<p>
This means we can use above information to create Clojure fns on the
fly for java inter-op. One great use case would be to generate Clojure
fns out of AWS Java SDK, which I might do if time permits.
</p>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-clojure.html">clojure</a> </div>]]></description>
  <category>clojure</category>
  <link>https://www.birkey.co/2018-10-26-datafy-and-tap>-in-clojure-1.10.html</link>
  <pubDate>Fri, 26 Oct 2018 11:19:00 -0700</pubDate>
</item>
<item>
  <title>Debug VoidLinux unresolvable lib issue</title>
  <description><![CDATA[
<p>
I have been a happy user of <b><a href="https://voidlinux.org/">VoidLinux</a></b> for about a year now and so
far have had almost no glitches whatsoever except for updating a year
old version of it installed on one of my spare laptop. The issue started as following:
</p>
<div class="org-src-container">
<pre class="src src-shell"><code>xbps-install -Su</code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">resulted in following:</span></code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">mozjs: broken, unresolvable shlib `libicu.so'</span></code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">Transaction aborted due to unresolved shlibs.</span></code>
</pre>
</div>
<p>
I do not now about you but I usually start with a google search of
what I think is somewhat general terms in my error message, which is
<i><b>&ldquo;Transaction aborted due to unresolved shlibs&rdquo;</b></i> in my case. Searching
with the above term came up with number of results and all point to
the build system is still running. You can check the status of it
here: <a href="https://build.voidlinux.eu/waterfall">Void Build Status</a>, which I did find that all is green and
idle. So it did not help me resolve my issue. Then, I decided to do
one more search with <i><b>&ldquo;mozjs: broken, unresolvable shlib
`libicu.so&rsquo;&rdquo;</b></i>, which is more specific to the state of my box only but
that did not help me go anywhere. Then I decided to debug it
myself. Following is my commandline session how I resolved it:
</p>
<div class="org-src-container">
<pre class="src src-shell"><code><span style="color: #b22222;"># </span><span style="color: #b22222;">Ran the command again to make sure I have above issue </span></code>
<code>xbps-install -Su</code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">again resulted in following:</span></code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">mozjs: broken, unresolvable shlib `libicu.so'</span></code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">Transaction aborted due to unresolved shlibs.</span></code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">Notice the /*mozjs*/, which is my clue. Then I did:</span></code>
<code>xbps-query -Rs mozjs</code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">from the output, I confirmed that it was not installed on my box,</span></code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">which is my second clue to check if my repos url are</span></code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">up-to-date. Remember it is a year old version of VoidLinux.  I</span></code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">noticed from the output of xpbs-install -u, that the</span></code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">void-repo-nonfree url does indeed point to an old url. So, I did:</span></code>
<code>xbps-remove void-repo-nonfree &amp;&amp; xbps-install void-repo-nonfree</code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">to make sure my repo url is up-to-date. Then it is time to clean my</span></code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">repo cache and remove any packages that might be orphened since my</span></code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">repo url is pointing to a different url now. Using manpages for</span></code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">xpbs-remove, I can do above with:</span></code>
<code>xbps-remove -Oo</code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">Then I ran:</span></code>
<code>xbps-install -Su</code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">Voila!, My one year old box is up-to-date without any issues now.</span></code>
<code><span style="color: #b22222;"># </span><span style="color: #b22222;">After all of this, I just made an one liner alias in my shell config:</span></code>
<code><span style="color: #483d8b;">alias</span> <span style="color: #a0522d;">c</span>=<span style="color: #8b2252;">'xbps-remove void-repo-nonfree &amp;&amp; xbps-install void-repo-nonfree &amp;&amp; xbps-install -Su </span></code>
</pre>
</div>

<p>
So no love lost for VoidLinux and it is still as awesome as ever. Just
to recap steps that I took to solve the issue:
</p>
<ol class="org-ol">
<li>Start using more general term to do a google search then narrow it
   to specific ones. If it works, you save time and unneeded effort.</li>
<li>Check for the problem package reported. Is it installed? If yes,
   try removing or updating it to see if it resolves your issue.</li>
<li>If you do not see the package installed, it might be repo url +
   orphaned package issue. So update the repo url, remove orphan
   packages and rebuild the cache.</li>
</ol>

<p>
If you tried all of the above and your issue still did not get
resolved, you might want to post it in VoidLinux forum for help. 
</p>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-voidlinux.html">VoidLinux</a> </div>]]></description>
  <category>VoidLinux</category>
  <link>https://www.birkey.co/2018-10-20-debug-voidlinux-unresolvable-lib-issue.html</link>
  <pubDate>Sat, 20 Oct 2018 13:53:00 -0700</pubDate>
</item>
<item>
  <title>Visualize Google search results from Clojure REPL</title>
  <description><![CDATA[
<p>
While back when I was learning Clojure, I have written a small lib
that allows me directly generate bar chart out of google search
results from Clojure. I updated it with latest deps and added a fn to
save the bar-chart to a png file. You can checkout the project here:
<a href="https://github.com/oneness/gcount">https://github.com/oneness/gcount</a>.  Here is a one liner to get you
going:
</p>
<div class="org-src-container">
<pre class="src src-shell"><code>git clone git@github.com/oneness/gcount.git &amp;&amp; <span style="color: #483d8b;">cd</span> gcount &amp;&amp; lein repl</code>
</pre>
</div>
<p>
Once you are in repl, you can type following:
</p>
<div class="org-src-container">
<pre class="src src-clojure"><code><span style="color: #7f7f7f;">(</span>search-view-terms <span style="color: #7f7f7f;">[</span><span style="color: #8b2252;">"Clojure Programming"</span> <span style="color: #8b2252;">"Elixir Programming"</span> <span style="color: #8b2252;">"Elm Programming"</span><span style="color: #7f7f7f;">])</span></code>
</pre>
</div>
<p>
Above will produce something like this:
<img src="https://www.birkey.co/images/google-search-result.png" alt="google-search-result.png">
</p>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-clojure.html">clojure</a> </div>]]></description>
  <category>clojure</category>
  <link>https://www.birkey.co/2018-10-04-visualize-google-search-results-from-clojure-repl.html</link>
  <pubDate>Thu, 04 Oct 2018 11:21:00 -0700</pubDate>
</item>
<item>
  <title>VM flags from running JVM</title>
  <description><![CDATA[
<p>
While I was doing some JVM GC analysis recently, I got curious about the vm flags that `java` command uses by default if you do not specify it when starting your JVM.
Reading up JDK docs, I found <b>jcmd</b> is exactly what you need:
</p>
<div class="org-src-container">
<pre class="src src-shell"><code>jcmd</code>
</pre>
</div>
<p>
That will list all jvm instances running on your system beginning with
its pids, which you can pass into <b>jcmd</b> with options to print VM flags like this:
</p>
<div class="org-src-container">
<pre class="src src-shell"><code>jcmd &lt;pid&gt; VM.flags</code>
</pre>
</div>
<p>
There are many options you can use other than `VM.flags`, which you can get a full list by:
</p>
<div class="org-src-container">
<pre class="src src-shell"><code>jcmd &lt;pid&gt; help</code>
</pre>
</div>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-jvm.html">jvm</a> </div>]]></description>
  <category>jvm</category>
  <link>https://www.birkey.co/2018-10-03-vm-flags-from-running-jvm.html</link>
  <pubDate>Wed, 03 Oct 2018 12:03:00 -0700</pubDate>
</item>
<item>
  <title>Blogging Made Simple</title>
  <description><![CDATA[
<p>
After taking some time off from work to focus on projects that I like
to take on, I set out to find a simple way to use git and emacs workflow to
start blogging again. Among plethora of options on the web, I came
across this project - <a href="https://github.com/bastibe/org-static-blog">Org Static Blog</a> - that I resonated with. It took
me no time to set it up and start blogging. Below is my setup:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><code><span style="color: #7f7f7f;">(</span>use-package org-static-blog</code>
<code>  <span style="color: #483d8b;">:straight</span> t</code>
<code>  <span style="color: #483d8b;">:config</span></code>
<code>  <span style="color: #b22222;">;; </span><span style="color: #b22222;">-----------------------------------------------------------------------------</span></code>
<code>  <span style="color: #b22222;">;; </span><span style="color: #b22222;">Set up blogging in Emacs</span></code>
<code>  <span style="color: #b22222;">;; </span><span style="color: #b22222;">-----------------------------------------------------------------------------</span></code>
<code></code>
<code>  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-static-blog-publish-title <span style="color: #8b2252;">"BirkeyCo"</span><span style="color: #7f7f7f;">)</span></code>
<code>  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-static-blog-publish-url <span style="color: #8b2252;">"https://www.birkey.co/"</span><span style="color: #7f7f7f;">)</span></code>
<code>  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-static-blog-publish-directory <span style="color: #8b2252;">"~/github/oneness.github.io/"</span><span style="color: #7f7f7f;">)</span></code>
<code>  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-static-blog-posts-directory <span style="color: #8b2252;">"~/github/oneness.github.io/posts/"</span><span style="color: #7f7f7f;">)</span></code>
<code>  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-static-blog-drafts-directory <span style="color: #8b2252;">"~/github/oneness.github.io/drafts/"</span><span style="color: #7f7f7f;">)</span></code>
<code>  <span style="color: #b22222;">;;</span><span style="color: #b22222;">(setq org-static-blog-enable-tags t)</span></code>
<code>  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-export-with-toc nil<span style="color: #7f7f7f;">)</span></code>
<code>  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-export-with-section-numbers nil<span style="color: #7f7f7f;">)</span></code>
<code></code>
<code>  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-static-blog-page-header</code>
<code>        <span style="color: #8b2252;">"&lt;meta name=\"author\" content=\"Kasim Tuman\"&gt;</span></code>
<code><span style="color: #8b2252;">&lt;meta name=\"referrer\" content=\"no-referrer\"&gt;</span></code>
<code><span style="color: #8b2252;">&lt;link href= \"static/style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;</span></code>
<code><span style="color: #8b2252;">&lt;link rel=\"icon\" href=\"static/favicon.ico\"&gt;</span></code>
<code><span style="color: #8b2252;">&lt;link rel=\"apple-touch-icon-precomposed\" href=\"static/birkey_logo.png\"&gt;</span></code>
<code><span style="color: #8b2252;">&lt;link rel=\"msapplication-TitleImage\" href=\"static/birkey_logo.png\"&gt;</span></code>
<code><span style="color: #8b2252;">&lt;link rel=\"msapplication-TitleColor\" href=\"#0141ff\"&gt;</span></code>
<code><span style="color: #8b2252;">&lt;script src=\"static/katex.min.js\"&gt;&lt;/script&gt;</span></code>
<code><span style="color: #8b2252;">&lt;script src=\"static/auto-render.min.js\"&gt;&lt;/script&gt;</span></code>
<code><span style="color: #8b2252;">&lt;link rel=\"stylesheet\" href=\"static/katex.min.css\"&gt;</span></code>
<code><span style="color: #8b2252;">&lt;script&gt;document.addEventListener(\"DOMContentLoaded\", function() { renderMathInElement(document.body); });&lt;/script&gt;</span></code>
<code><span style="color: #8b2252;">&lt;meta http-equiv=\"content-type\" content=\"application/xhtml+xml; charset=UTF-8\"&gt;</span></code>
<code><span style="color: #8b2252;">&lt;meta name=\"viewport\" content=\"initial-scale=1,width=device-width,minimum-scale=1\"&gt;"</span><span style="color: #7f7f7f;">)</span></code>
<code></code>
<code>  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-static-blog-page-preamble</code>
<code>        <span style="color: #8b2252;">"&lt;div class=\"header\"&gt;</span></code>
<code><span style="color: #8b2252;">  &lt;a href=\"https://birkey.co\"&gt;Code, Data and Network&lt;/a&gt;</span></code>
<code><span style="color: #8b2252;">  &lt;div class=\"sitelinks\"&gt;</span></code>
<code><span style="color: #8b2252;">    &lt;a href=\"https://twitter.com/KasimTuman\"&gt;Twitter&lt;/a&gt; | &lt;a href=\"https://github.com/oneness\"&gt;Github&lt;/a&gt;</span></code>
<code><span style="color: #8b2252;">  &lt;/div&gt;</span></code>
<code><span style="color: #8b2252;">&lt;/div&gt;"</span><span style="color: #7f7f7f;">)</span></code>
<code></code>
<code>  <span style="color: #7f7f7f;">(</span><span style="color: #a020f0;">setq</span> org-static-blog-page-postamble</code>
<code>        <span style="color: #8b2252;">"&lt;div id=\"archive\"&gt;</span></code>
<code><span style="color: #8b2252;">  &lt;a href=\"https://www.birkey.co/archive.html\"&gt;Other posts&lt;/a&gt;</span></code>
<code><span style="color: #8b2252;">&lt;/div&gt;</span></code>
<code><span style="color: #8b2252;">&lt;center&gt;&lt;a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\"&gt;&lt;img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/3.0/88x31.png\" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;span xmlns:dct=\"https://purl.org/dc/terms/\" href=\"https://purl.org/dc/dcmitype/Text\" property=\"dct:title\" rel=\"dct:type\"&gt;birkey.co&lt;/span&gt; by &lt;a xmlns:cc=\"https://creativecommons.org/ns#\" href=\"https://www.birkey.co\" property=\"cc:attributionName\" rel=\"cc:attributionURL\"&gt;Kasim Tuman&lt;/a&gt; is licensed under a &lt;a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\"&gt;Creative Commons Attribution-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/center&gt;"</span><span style="color: #7f7f7f;">)</span></code>
<code></code>
<code>  <span style="color: #b22222;">;; </span><span style="color: #b22222;">This slows down org-publish to a crawl, and it is not needed since</span></code>
<code>  <span style="color: #b22222;">;; </span><span style="color: #b22222;">I use magit anyway.</span></code>
<code>  <span style="color: #7f7f7f;">(</span>remove-hook 'find-file-hooks 'vc-find-file-hook<span style="color: #7f7f7f;">))</span></code>
</pre>
</div>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-emacs.html">emacs</a> <a href="tag-blogging.html">blogging</a> </div>]]></description>
  <category>emacs</category>
  <category>blogging</category>
  <link>https://www.birkey.co/2018-9-20-blogging-simpler.html</link>
  <pubDate>Wed, 19 Sep 2018 17:00:00 -0700</pubDate>
</item>
</channel>
</rss>
