#+title: Why Emacs
#+date: <2019-08-04 12:43>
#+filetags: emacs

I have been thinking about writing up my experience of using Emacs and
its positive influence on me as a Software Craftsman over the last 10
years or so. Over the weekend, I came across a a blog post by the CTO
of a company, who put it very well that have really resonated with
me. It is a great read, not too long not too short, that I strongly
recommend you go ahead read and come back here to continue with the
rest of what I had to say. Here is the link: [[https://www.fugue.co/blog/2018-08-09-two-years-with-emacs-as-a-cto.html][Two Years With Emacs as a
CEO (and now CTO)]]. 

So I am not going to repeat what he said about Emacs and why he still
loves to use it to get things done. I am going to add following points
on top of what he wrote there:
* Emacs is a great workbench
I see Emacs as an extremely well designed workbench that will evolve
with you as your work environment, technology and paradigms
change. Emacs is a live programming environment where you can change
every aspects of its functionalities, be it a simple text editing to a
complex work flow where you can interact with many external
systems. One of a startup that I worked had a mode where we have
interacted with our live system written in Clojure via its CLI
interface using `comint-mode`, which you should really checkout if you
are not familiar with it. You can use Emacs as the client with uniform
interface to many of the CLI, API and even for [[https://en.wikipedia.org/wiki/Application_binary_interface][ABI]]. For example `EXWM`,
which is an Window Manager, is a great example.
* Emacs is a great structured and unstructured text manipulation library
This is what I personally like a lot about Emacs. As a programmer, we
work with manipulating text all the time. Yes, there are great text
Editors out there, which by the way I have used all of them myself
before seeing the light of using Emacs. But I see all other
editors/IDEs as a framework for the things they set out to do rather
than a library that I can compose to solve a particular problem at
hand. For example, I can use `smartparens` package for structured text
editing of Clojure code.
* Emacs helps you focus
In this day of our age where everything tries to grab your constant
attention, Emacs stands out as the most distraction free environment
to be in. One might argue that Emacs user spends way more time
configuration management, which is definitely true when you are just
getting started with any new toolbox, I found I spend very little time
with configuration or keeping it up to date. Once you are familiar with
Emacs help system and built in Documentation, You can be pretty much
on your own when it comes to how much you spend on customization. It
is this freedom you get from using Emacs where you are in charge as to
how much customization you would like. The reason I say Emacs helps
you focus is due to the fact that you have the freedom to make it an
distraction free writing/coding/communication environment to get done
what matters the most to you and have a lot of fun along the way.
* Emacs has a learning curve
Yes, I do acknowledge that Emacs has a learning curve. However, most
of it is due to the wrong approach we tend to take when encountering an
unknown. On hindsight, I wish I had following approach, which I do now
all the time:
1. Start with getting familiar with Emacs terminology such as windows,
   buffers and frames etc. The builtin documentation is great for that
   and it is just C-h i (Hit Control and letter `h` at the same time,
   then hit `i`, which stands for info). To read Emacs' manual just
   enter `m` and select `Emacs` from minibuffer. Hmm, you might be
   wondering what is minibuffer, let us use this approach to find
   out. Press following C-h i m key sequence and type `Minibuffer` and
   hit enter. Voila, you are reading all about `Minibuffer` from the
   official Emacs manual. No other application that I have used comes
   close to the level of Emacs in terms of self documentation. 
2. Start with the goal of getting something done. I have two example
   that every programmer will benefit from learning: `Magit` and
   `Org-mode`. While you need to install `magit-mode`, which is a
   Emacs interface to git CLI, `org-mode` is built in. You will be
   surprised to find that it makes your git journey so much fun or
   your note organization so much enjoyable. I made the mistake of
   trying to memorize hot keys as much as I can before learning the
   hard truth of learning one key at a time as needed bases. I
   strongly recommend the only hot key you need at the beginning is
   `M-x`, where you just type a command so Emacs can execute for
   you. For Example, if you would like open (it is `visit` in Emacs
   speak) a file, just type `M-x` and type `file` then press tab key,
   select `find-file` in the completion buffer, now you can choose a
   file name from within the directory that you are in. It is just an
   example but knowing the fact that every action you perform in Emacs
   invokes an command, which is just an elisp function, is a very
   powerful realization. That means you can write an elisp function to
   have Emacs do whatever you like. You can also lookup what a command
   does using C-h f, then typing the name of the command. For example,
   C-h f then, type `org-insert-link` then enter and read on...
3. I advise against starting with Emacs using other's configuration
   including Emacs that comes with pre-configuration. As I have
   mentioned earlier, Emacs is a great library where you can pick and
   choose to fit your work style. You will loose this great aspects if
   you start with other's way of configuring/composing it. If you had
   to just start with a minimal config, put this in your `init.el`
   file and start changing/adding/organizing configs as you see
   fit. For example:
#+BEGIN_SRC emacs-lisp
  ;; Emacs reads init.el file located in ~/.emacs.d at startup
  ;; bootstrap el-get
  (add-to-list 'load-path "~/.emacs.d/el-get/el-get")
  (unless (require 'el-get nil 'noerror)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
      (goto-char (point-max))
      (eval-print-last-sexp)))

  ;; Initialize available packages first
  (package-refresh-contents t)

  ;; The only package you need to get started
  (el-get-bundle smex
    (progn
      (require 'smex)
      (global-set-key (kbd "M-x") 'smex)))
#+END_SRC
  Above snippets sets you up to use `El-get`, a great package manager
  that I came to rely over the years and have never failed me. It also
  pulls in the only package you had to have before getting started,
  `smex` that makes the only command `M-x` you need much more
  intuitive. Then say if you want to try `magit`, just type M-x
  el-get-install, then `magit`. El-get will download it and install it
  so you can starting using it in your git projects. Once you can find
  your way around Emacs, you can start your journey of how best
  organize your config/customization as you go along. I use just one
  org file for it and you might or might not like it. Here is the file
  in its entirety if you are interested: [[/home/kasim/github/oneness.github.io/static/config.html][My config snapshot]]
